<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{title}}</title>

    <meta content="The best website for all real estate related!" name="description" />
    <meta content="Real Estate" name="keywords" />
    <meta name="author" content="Muhammad Hasan Bin Suwandi, Owen Ngo, Bryan Chin">
    <meta name="theme-color" content="#ffffff">

     <!-- Manifest -->
    <link rel="manifest" href="/manifest.webmanifest">

    <!-- Favicons -->
    <link href="/img/house32.svg" rel="icon" />
    <link href="/img/house128.svg" rel="apple-touch-icon" />

    <!-- Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700"
      rel="stylesheet"
    />

    <!-- Booststrap v5.0.2
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
     -->

    <!-- Vendor CSS Files -->
    <link href="/vendor/animate/animate.min.css" rel="stylesheet" />
    <link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet" />
    <link href="/vendor/swiper/swiper-bundle.min.css" rel="stylesheet" />

    <!-- Template Main CSS File -->
    <link href="/css/style.css" rel="stylesheet" />

    <!-- Custom Scrollbar -->
    <link href="/css/customScroll.css" rel="stylesheet"/>

    {{!-- <!-- Boostsrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"> --}}

    <!-- =======================================================
    * Template Name: EstateAgency - v4.3.0
    * Template URL: https://bootstrapmade.com/real-estate-agency-bootstrap-template/
    * Author: BootstrapMade.com
    * License: https://bootstrapmade.com/license/
    ======================================================== -->
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  {{#if displayPublicResaleGraph}}
  <!-- Display graph for public resale listings -->
  <script>
    
    // Function that automatically assign floor range
    function floorRangeSelector(floorLevel) {
      if (floorLevel === null || floorLevel === undefined) {
        return 'Error'
      } else if (floorLevel >= 1 && floorLevel <= 5) {
        return '01 TO 05'
      } else if (floorLevel >= 6 && floorLevel<= 10) {
        return '06 TO 10'
      } else if (floorLevel >= 11 && floorLevel <= 15) {
        return '11 TO 15'
      } else if (floorLevel >= 16 && floorLevel<= 20) {
        return '16 TO 20'
      } else if (floorLevel >= 21 && floorLevel <= 25) {
        return '21 TO 25'
      } else if (floorLevel >= 26 && floorLevel<= 30) {
        return '26 TO 30'
      } else if (floorLevel >= 31 && floorLevel<= 35) {
        return '31 TO 35'
      } else if (floorLevel >= 36 && floorLevel<= 40) {
        return '36 TO 40'
      } else if (floorLevel >= 41 && floorLevel<= 45) {
        return '41 TO 45'
      } else {
        return '46 TO 51'
      }
    }

      var baseAPIUrl = "http://localhost:8000/api/"
      function callPredictAPI(yearList){

        var resultList = []
        for (i in yearList){
          var resaleDate = yearList[i]
          var body = {
          type: 'public',
          resale_date: resaleDate,
          town: "{{town}}",
          flat_type: "{{flatType}}",
          storey_range: floorRangeSelector({{flatLevel}}),
          floor_area_sqm: {{floorSqm}},
          flat_model: "{{flatModel}}",
          lease_commence_date: new Date({{leaseCommenceDate}})
          }

          // Remmeber to run docker
          fetch(baseAPIUrl + 'predictResale', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json',
            }, 
            body: JSON.stringify(body)
          })
            .then(response => response.json())
            .then(data => {
              resultList.push(Math.round(data))
              console.log('Success:', data);
            })
            .catch((error) => {
              console.error('Error:', error);
            })
          }
          return resultList
      }

      var yearList = [new Date(1990, 0, 1), new Date(1991, 0, 1), 
                      new Date(1992, 0, 1), new Date(1993, 0, 1),
                      new Date(1994, 0, 1), new Date(1995, 0, 1),
                      new Date(1996, 0, 1), new Date(1997, 0, 1),
                      new Date(1998, 0, 1), new Date(1999, 0, 1),

                      new Date(2000, 0, 1), new Date(2001, 0, 1), 
                      new Date(2002, 0, 1), new Date(2003, 0, 1),
                      new Date(2004, 0, 1), new Date(2005, 0, 1),
                      new Date(2006, 0, 1), new Date(2007, 0, 1),
                      new Date(2008, 0, 1), new Date(2009, 0, 1),

                      new Date(2010, 0, 1), new Date(2011, 0, 1),
                      new Date(2012, 0, 1), new Date(2013, 0, 1),
                      new Date(2014, 0, 1), new Date(2015, 0, 1),
                      new Date(2016, 0, 1), new Date(2017, 0, 1),
                      new Date(2018, 0, 1), new Date(2019, 0, 1),

                      new Date(2020, 0, 1), new Date(2021, 0, 1),
                      new Date(2022, 0, 1), new Date(2023, 0, 1),]

      const responseList = callPredictAPI(yearList)

      google.charts.load('current', {packages: ['corechart', 'line']});
      google.charts.setOnLoadCallback(drawBasic);
      function drawBasic() {

        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Year');
        data.addColumn('number', 'Predicted Resale Value');

        data.addRows([
        [new Date (1990, 0, 1), responseList[0]], [new Date (1991, 0, 1), responseList[1]],
        [new Date (1992, 0, 1), responseList[2]], [new Date (1993, 0, 1), responseList[3]],
        [new Date (1994, 0, 1), responseList[4]], [new Date (1995, 0, 1), responseList[5]],
        [new Date (1996, 0, 1), responseList[6]], [new Date (1997, 0, 1), responseList[7]],
        [new Date (1998, 0, 1), responseList[8]], [new Date (1999, 0, 1), responseList[9]],

        [new Date (2000, 0, 1), responseList[10]], [new Date (2001, 0, 1), responseList[11]],
        [new Date (2002, 0, 1), responseList[12]], [new Date (2003, 0, 1), responseList[13]],
        [new Date (2004, 0, 1), responseList[14]], [new Date (2005, 0, 1), responseList[15]],
        [new Date (2006, 0, 1), responseList[16]], [new Date (2007, 0, 1), responseList[17]],
        [new Date (2008, 0, 1), responseList[18]], [new Date (2009, 0, 1), responseList[19]],

        [new Date (2010, 0, 1), responseList[20]], [new Date (2011, 0, 1), responseList[21]],
        [new Date (2012, 0, 1), responseList[22]], [new Date (2013, 0, 1), responseList[23]],
        [new Date (2014, 0, 1), responseList[24]], [new Date (2015, 0, 1), responseList[25]],
        [new Date (2016, 0, 1), responseList[26]], [new Date (2017, 0, 1), responseList[27]],
        [new Date (2018, 0, 1), responseList[28]], [new Date (2019, 0, 1), responseList[29]],

        [new Date (2020, 0, 1), responseList[30]], [new Date (2021, 0, 1), responseList[31]],
        [new Date (2022, 0, 1), responseList[32]], [new Date (2023, 0, 1), responseList[33]],
        ]);

        var options = {
          title: 'Predicted Resale Value',
          hAxis: {
            title: 'Year'
          },
          vAxis: {
            title: 'Resale Value'
          },
          curveType: 'function',
          trendlines: { 0: {} }
        };

        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

        chart.draw(data, options);

    }
  </script>
  {{/if}}

  {{#if displayPrivateResaleGraph}}
  <!-- Display graph for private resale listings -->
  <script>
  // Function that automatically assign floor range
    function floorRangeSelector(floorLevel) {
      if (floorLevel === null || floorLevel === undefined) {
        return 'Error'
      } else if (floorLevel >= 1 && floorLevel <= 5) {
        return '01 TO 05'
      } else if (floorLevel >= 6 && floorLevel<= 10) {
        return '06 TO 10'
      } else if (floorLevel >= 11 && floorLevel <= 15) {
        return '11 TO 15'
      } else if (floorLevel >= 16 && floorLevel<= 20) {
        return '16 TO 20'
      } else if (floorLevel >= 21 && floorLevel <= 25) {
        return '21 TO 25'
      } else if (floorLevel >= 26 && floorLevel<= 30) {
        return '26 TO 30'
      } else if (floorLevel >= 31 && floorLevel<= 35) {
        return '31 TO 35'
      } else if (floorLevel >= 36 && floorLevel<= 40) {
        return '36 TO 40'
      } else if (floorLevel >= 41 && floorLevel<= 45) {
        return '41 TO 45'
      } else {
        return '46 TO 51'
      }
    }

      var baseAPIUrl = "http://localhost:8000/api/"
      function callPredictAPI(yearList){

        var resultList = []
        for (i in yearList){
          var resaleDate = yearList[i]
          var body = {
            type: 'private',
            house_type: "{{houseType}}",
            postal_district: "{{postalDistrict}}",
            market_segment: "{{marketSegment}}",
            type_of_area: "{{typeOfArea}}",
            floor_level: floorRangeSelector({{floorLevel}}),
            resale_date: resaleDate,
            floor_area_sqm: {{floorSqm}},
            is_freehold: 0,
            lease_duration: 99,
            lease_commence_date: new Date({{leaseCommenceDate}})
          }

          // Remmeber to run docker
          fetch(baseAPIUrl + 'predictResale', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json',
            }, 
            body: JSON.stringify(body)
          })
            .then(response => response.json())
            .then(data => {
              resultList.push(Math.round(data))
              console.log('Success:', data);
            })
            .catch((error) => {
              console.error('Error:', error);
            })
          }
          return resultList
      }

      var yearList = [new Date(1990, 0, 1), new Date(1991, 0, 1), 
                      new Date(1992, 0, 1), new Date(1993, 0, 1),
                      new Date(1994, 0, 1), new Date(1995, 0, 1),
                      new Date(1996, 0, 1), new Date(1997, 0, 1),
                      new Date(1998, 0, 1), new Date(1999, 0, 1),

                      new Date(2000, 0, 1), new Date(2001, 0, 1), 
                      new Date(2002, 0, 1), new Date(2003, 0, 1),
                      new Date(2004, 0, 1), new Date(2005, 0, 1),
                      new Date(2006, 0, 1), new Date(2007, 0, 1),
                      new Date(2008, 0, 1), new Date(2009, 0, 1),

                      new Date(2010, 0, 1), new Date(2011, 0, 1),
                      new Date(2012, 0, 1), new Date(2013, 0, 1),
                      new Date(2014, 0, 1), new Date(2015, 0, 1),
                      new Date(2016, 0, 1), new Date(2017, 0, 1),
                      new Date(2018, 0, 1), new Date(2019, 0, 1),

                      new Date(2020, 0, 1), new Date(2021, 0, 1),
                      new Date(2022, 0, 1), new Date(2023, 0, 1),]

      const responseList = callPredictAPI(yearList)

      google.charts.load('current', {packages: ['corechart', 'line']});
      google.charts.setOnLoadCallback(drawBasic);
      function drawBasic() {

        var data = new google.visualization.DataTable();
        data.addColumn('date', 'Year');
        data.addColumn('number', 'Predicted Resale Value');

        data.addRows([
        [new Date (1990, 0, 1), responseList[0]], [new Date (1991, 0, 1), responseList[1]],
        [new Date (1992, 0, 1), responseList[2]], [new Date (1993, 0, 1), responseList[3]],
        [new Date (1994, 0, 1), responseList[4]], [new Date (1995, 0, 1), responseList[5]],
        [new Date (1996, 0, 1), responseList[6]], [new Date (1997, 0, 1), responseList[7]],
        [new Date (1998, 0, 1), responseList[8]], [new Date (1999, 0, 1), responseList[9]],

        [new Date (2000, 0, 1), responseList[10]], [new Date (2001, 0, 1), responseList[11]],
        [new Date (2002, 0, 1), responseList[12]], [new Date (2003, 0, 1), responseList[13]],
        [new Date (2004, 0, 1), responseList[14]], [new Date (2005, 0, 1), responseList[15]],
        [new Date (2006, 0, 1), responseList[16]], [new Date (2007, 0, 1), responseList[17]],
        [new Date (2008, 0, 1), responseList[18]], [new Date (2009, 0, 1), responseList[19]],

        [new Date (2010, 0, 1), responseList[20]], [new Date (2011, 0, 1), responseList[21]],
        [new Date (2012, 0, 1), responseList[22]], [new Date (2013, 0, 1), responseList[23]],
        [new Date (2014, 0, 1), responseList[24]], [new Date (2015, 0, 1), responseList[25]],
        [new Date (2016, 0, 1), responseList[26]], [new Date (2017, 0, 1), responseList[27]],
        [new Date (2018, 0, 1), responseList[28]], [new Date (2019, 0, 1), responseList[29]],

        [new Date (2020, 0, 1), responseList[30]], [new Date (2021, 0, 1), responseList[31]],
        [new Date (2022, 0, 1), responseList[32]], [new Date (2023, 0, 1), responseList[33]],
        ]);

        var options = {
          title: 'Predicted Resale Value',
          hAxis: {
            title: 'Year'
          },
          vAxis: {
            title: 'Resale Value'
          },
          curveType: 'function'
        };

        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));

        chart.draw(data, options);

    }
  </script>
  {{/if}}
  </head>
  <body>
    {{>_navbar}}
    {{{body}}}
    {{>_footer}}
    <div id="preloader"></div>
    <a
      href="#"
      class="back-to-top d-flex align-items-center justify-content-center"
    ><i class="bi bi-arrow-up-short"></i></a>

    <!-- Vendor JS Files -->
    <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/vendor/swiper/swiper-bundle.min.js"></script>
    <!-- Template Main JS File -->
    <script src="/js/main.js"></script>

    {{!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script> --}}
  </body>
</html>